 SSD(
  (base_net): Sequential(
    (0): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
    )
    (1): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
        (4): Identity()
      )
    )
    (2): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (3): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (4): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (5): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (6): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (7): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (8): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (9): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (10): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (11): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (12): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (13): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (14): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (15): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (16): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (17): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (18): Sequential(
      (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
    )
  )
  (extras): ModuleList(
    (0): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (1): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (2): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
    (3): InvertedResidual(
      (conv): Sequential(
        (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (1): Identity()
        (2): ReLU6(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        (4): Identity()
        (5): ReLU6(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        (7): Identity()
      )
    )
  )
  (classification_headers): ModuleList(
    (0): Sequential(
      (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(576, 126, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): Sequential(
      (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(1280, 126, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
    )
    (5): Conv2d(64, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (regression_headers): ModuleList(
    (0): Sequential(
      (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (1): Sequential(
      (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(1280, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (2): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (3): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (4): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
      (1): Identity()
      (2): ReLU6()
      (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
    )
    (5): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (source_layer_add_ons): ModuleList()
)
base_net Sequential(
  (0): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
  )
  (1): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
      (4): Identity()
    )
  )
  (2): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (3): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (4): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (5): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (6): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (7): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (8): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (9): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (10): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (11): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (12): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (13): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (14): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (15): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (16): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (17): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (18): Sequential(
    (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
  )
)
base_net.0 Sequential(
  (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
)
base_net.0.0 Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
base_net.0.1 Identity()
base_net.0.2 ReLU6(inplace=True)
base_net.1 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
    (4): Identity()
  )
)
base_net.1.conv Sequential(
  (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
  (4): Identity()
)
base_net.1.conv.0 Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
base_net.1.conv.1 Identity()
base_net.1.conv.2 ReLU6(inplace=True)
base_net.1.conv.3 Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
base_net.1.conv.4 Identity()
base_net.2 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.2.conv Sequential(
  (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.2.conv.0 Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1))
base_net.2.conv.1 Identity()
base_net.2.conv.2 ReLU6(inplace=True)
base_net.2.conv.3 Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96)
base_net.2.conv.4 Identity()
base_net.2.conv.5 ReLU6(inplace=True)
base_net.2.conv.6 Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1))
base_net.2.conv.7 Identity()
base_net.3 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.3.conv Sequential(
  (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.3.conv.0 Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
base_net.3.conv.1 Identity()
base_net.3.conv.2 ReLU6(inplace=True)
base_net.3.conv.3 Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144)
base_net.3.conv.4 Identity()
base_net.3.conv.5 ReLU6(inplace=True)
base_net.3.conv.6 Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1))
base_net.3.conv.7 Identity()
base_net.4 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.4.conv Sequential(
  (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.4.conv.0 Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1))
base_net.4.conv.1 Identity()
base_net.4.conv.2 ReLU6(inplace=True)
base_net.4.conv.3 Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144)
base_net.4.conv.4 Identity()
base_net.4.conv.5 ReLU6(inplace=True)
base_net.4.conv.6 Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1))
base_net.4.conv.7 Identity()
base_net.5 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.5.conv Sequential(
  (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.5.conv.0 Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
base_net.5.conv.1 Identity()
base_net.5.conv.2 ReLU6(inplace=True)
base_net.5.conv.3 Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
base_net.5.conv.4 Identity()
base_net.5.conv.5 ReLU6(inplace=True)
base_net.5.conv.6 Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
base_net.5.conv.7 Identity()
base_net.6 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.6.conv Sequential(
  (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.6.conv.0 Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
base_net.6.conv.1 Identity()
base_net.6.conv.2 ReLU6(inplace=True)
base_net.6.conv.3 Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192)
base_net.6.conv.4 Identity()
base_net.6.conv.5 ReLU6(inplace=True)
base_net.6.conv.6 Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1))
base_net.6.conv.7 Identity()
base_net.7 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.7.conv Sequential(
  (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.7.conv.0 Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1))
base_net.7.conv.1 Identity()
base_net.7.conv.2 ReLU6(inplace=True)
base_net.7.conv.3 Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192)
base_net.7.conv.4 Identity()
base_net.7.conv.5 ReLU6(inplace=True)
base_net.7.conv.6 Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
base_net.7.conv.7 Identity()
base_net.8 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.8.conv Sequential(
  (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.8.conv.0 Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
base_net.8.conv.1 Identity()
base_net.8.conv.2 ReLU6(inplace=True)
base_net.8.conv.3 Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
base_net.8.conv.4 Identity()
base_net.8.conv.5 ReLU6(inplace=True)
base_net.8.conv.6 Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
base_net.8.conv.7 Identity()
base_net.9 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.9.conv Sequential(
  (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.9.conv.0 Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
base_net.9.conv.1 Identity()
base_net.9.conv.2 ReLU6(inplace=True)
base_net.9.conv.3 Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
base_net.9.conv.4 Identity()
base_net.9.conv.5 ReLU6(inplace=True)
base_net.9.conv.6 Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
base_net.9.conv.7 Identity()
base_net.10 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.10.conv Sequential(
  (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.10.conv.0 Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
base_net.10.conv.1 Identity()
base_net.10.conv.2 ReLU6(inplace=True)
base_net.10.conv.3 Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
base_net.10.conv.4 Identity()
base_net.10.conv.5 ReLU6(inplace=True)
base_net.10.conv.6 Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1))
base_net.10.conv.7 Identity()
base_net.11 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.11.conv Sequential(
  (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.11.conv.0 Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1))
base_net.11.conv.1 Identity()
base_net.11.conv.2 ReLU6(inplace=True)
base_net.11.conv.3 Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384)
base_net.11.conv.4 Identity()
base_net.11.conv.5 ReLU6(inplace=True)
base_net.11.conv.6 Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1))
base_net.11.conv.7 Identity()
base_net.12 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.12.conv Sequential(
  (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.12.conv.0 Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
base_net.12.conv.1 Identity()
base_net.12.conv.2 ReLU6(inplace=True)
base_net.12.conv.3 Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
base_net.12.conv.4 Identity()
base_net.12.conv.5 ReLU6(inplace=True)
base_net.12.conv.6 Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
base_net.12.conv.7 Identity()
base_net.13 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.13.conv Sequential(
  (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.13.conv.0 Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
base_net.13.conv.1 Identity()
base_net.13.conv.2 ReLU6(inplace=True)
base_net.13.conv.3 Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
base_net.13.conv.4 Identity()
base_net.13.conv.5 ReLU6(inplace=True)
base_net.13.conv.6 Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1))
base_net.13.conv.7 Identity()
base_net.14 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.14.conv Sequential(
  (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.14.conv.0 Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1))
base_net.14.conv.1 Identity()
base_net.14.conv.2 ReLU6(inplace=True)
base_net.14.conv.3 Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576)
base_net.14.conv.4 Identity()
base_net.14.conv.5 ReLU6(inplace=True)
base_net.14.conv.6 Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1))
base_net.14.conv.7 Identity()
base_net.15 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.15.conv Sequential(
  (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.15.conv.0 Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
base_net.15.conv.1 Identity()
base_net.15.conv.2 ReLU6(inplace=True)
base_net.15.conv.3 Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
base_net.15.conv.4 Identity()
base_net.15.conv.5 ReLU6(inplace=True)
base_net.15.conv.6 Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
base_net.15.conv.7 Identity()
base_net.16 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.16.conv Sequential(
  (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.16.conv.0 Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
base_net.16.conv.1 Identity()
base_net.16.conv.2 ReLU6(inplace=True)
base_net.16.conv.3 Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
base_net.16.conv.4 Identity()
base_net.16.conv.5 ReLU6(inplace=True)
base_net.16.conv.6 Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1))
base_net.16.conv.7 Identity()
base_net.17 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
base_net.17.conv Sequential(
  (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
base_net.17.conv.0 Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1))
base_net.17.conv.1 Identity()
base_net.17.conv.2 ReLU6(inplace=True)
base_net.17.conv.3 Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960)
base_net.17.conv.4 Identity()
base_net.17.conv.5 ReLU6(inplace=True)
base_net.17.conv.6 Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1))
base_net.17.conv.7 Identity()
base_net.18 Sequential(
  (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
)
base_net.18.0 Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
base_net.18.1 Identity()
base_net.18.2 ReLU6(inplace=True)
extras ModuleList(
  (0): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (1): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (2): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
  (3): InvertedResidual(
    (conv): Sequential(
      (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
      (1): Identity()
      (2): ReLU6(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
      (4): Identity()
      (5): ReLU6(inplace=True)
      (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      (7): Identity()
    )
  )
)
extras.0 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
extras.0.conv Sequential(
  (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
extras.0.conv.0 Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1))
extras.0.conv.1 Identity()
extras.0.conv.2 ReLU6(inplace=True)
extras.0.conv.3 Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
extras.0.conv.4 Identity()
extras.0.conv.5 ReLU6(inplace=True)
extras.0.conv.6 Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
extras.0.conv.7 Identity()
extras.1 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
extras.1.conv Sequential(
  (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
extras.1.conv.0 Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
extras.1.conv.1 Identity()
extras.1.conv.2 ReLU6(inplace=True)
extras.1.conv.3 Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
extras.1.conv.4 Identity()
extras.1.conv.5 ReLU6(inplace=True)
extras.1.conv.6 Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
extras.1.conv.7 Identity()
extras.2 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
extras.2.conv Sequential(
  (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
extras.2.conv.0 Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
extras.2.conv.1 Identity()
extras.2.conv.2 ReLU6(inplace=True)
extras.2.conv.3 Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
extras.2.conv.4 Identity()
extras.2.conv.5 ReLU6(inplace=True)
extras.2.conv.6 Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
extras.2.conv.7 Identity()
extras.3 InvertedResidual(
  (conv): Sequential(
    (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    (1): Identity()
    (2): ReLU6(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
    (4): Identity()
    (5): ReLU6(inplace=True)
    (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
    (7): Identity()
  )
)
extras.3.conv Sequential(
  (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
  (1): Identity()
  (2): ReLU6(inplace=True)
  (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
  (4): Identity()
  (5): ReLU6(inplace=True)
  (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
  (7): Identity()
)
extras.3.conv.0 Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
extras.3.conv.1 Identity()
extras.3.conv.2 ReLU6(inplace=True)
extras.3.conv.3 Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
extras.3.conv.4 Identity()
extras.3.conv.5 ReLU6(inplace=True)
extras.3.conv.6 Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
extras.3.conv.7 Identity()
classification_headers ModuleList(
  (0): Sequential(
    (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(576, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (1): Sequential(
    (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(1280, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (2): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (3): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (4): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
  )
  (5): Conv2d(64, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.0 Sequential(
  (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(576, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.0.0 Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
classification_headers.0.1 Identity()
classification_headers.0.2 ReLU6()
classification_headers.0.3 Conv2d(576, 126, kernel_size=(1, 1), stride=(1, 1))
classification_headers.1 Sequential(
  (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(1280, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.1.0 Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
classification_headers.1.1 Identity()
classification_headers.1.2 ReLU6()
classification_headers.1.3 Conv2d(1280, 126, kernel_size=(1, 1), stride=(1, 1))
classification_headers.2 Sequential(
  (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.2.0 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
classification_headers.2.1 Identity()
classification_headers.2.2 ReLU6()
classification_headers.2.3 Conv2d(512, 126, kernel_size=(1, 1), stride=(1, 1))
classification_headers.3 Sequential(
  (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.3.0 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
classification_headers.3.1 Identity()
classification_headers.3.2 ReLU6()
classification_headers.3.3 Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
classification_headers.4 Sequential(
  (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
)
classification_headers.4.0 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
classification_headers.4.1 Identity()
classification_headers.4.2 ReLU6()
classification_headers.4.3 Conv2d(256, 126, kernel_size=(1, 1), stride=(1, 1))
classification_headers.5 Conv2d(64, 126, kernel_size=(1, 1), stride=(1, 1))
regression_headers ModuleList(
  (0): Sequential(
    (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (1): Sequential(
    (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(1280, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (2): Sequential(
    (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (3): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (4): Sequential(
    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
    (1): Identity()
    (2): ReLU6()
    (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
  )
  (5): Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.0 Sequential(
  (0): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.0.0 Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576)
regression_headers.0.1 Identity()
regression_headers.0.2 ReLU6()
regression_headers.0.3 Conv2d(576, 24, kernel_size=(1, 1), stride=(1, 1))
regression_headers.1 Sequential(
  (0): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(1280, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.1.0 Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
regression_headers.1.1 Identity()
regression_headers.1.2 ReLU6()
regression_headers.1.3 Conv2d(1280, 24, kernel_size=(1, 1), stride=(1, 1))
regression_headers.2 Sequential(
  (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.2.0 Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
regression_headers.2.1 Identity()
regression_headers.2.2 ReLU6()
regression_headers.2.3 Conv2d(512, 24, kernel_size=(1, 1), stride=(1, 1))
regression_headers.3 Sequential(
  (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.3.0 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
regression_headers.3.1 Identity()
regression_headers.3.2 ReLU6()
regression_headers.3.3 Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
regression_headers.4 Sequential(
  (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
  (1): Identity()
  (2): ReLU6()
  (3): Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
)
regression_headers.4.0 Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
regression_headers.4.1 Identity()
regression_headers.4.2 ReLU6()
regression_headers.4.3 Conv2d(256, 24, kernel_size=(1, 1), stride=(1, 1))
regression_headers.5 Conv2d(64, 24, kernel_size=(1, 1), stride=(1, 1))
source_layer_add_ons ModuleList()
